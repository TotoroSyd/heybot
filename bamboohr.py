# Instruction


import requests
import json
import os
from flask import Flask, request, jsonify


class Bamboohr:
    def __init__(self):
        self.companyDomain = 'monster0inc'
        self.AUTHORIZATION_TOKEN = os.environ['AUTHORIZATION_TOKEN']

    def get_employee_directory(self):
        url = "https://api.bamboohr.com/api/gateway.php/%s/v1/employees/directory" % (
            self.companyDomain)
        headers = {
            "accept": "application/json",
            # authorization is generated by feeding API key to code snippet
            "authorization": "Basic %s" % (self.AUTHORIZATION_TOKEN)
        }
        response = requests.request("GET", url, headers=headers)
        response_parse = json.loads(response.text)
        if response.status_code == 200:
            return response_parse
        else:
            # print(response)
            return {}

    # method in class doesnt allow empty arg - put 'self'
    # if there are more than 2 args, put 'self' as the 1st arg

    def get_employee(self, employee_id):
        url = "https://api.bamboohr.com/api/gateway.php/%s/v1/employees/%s/" % (
            self.companyDomain, employee_id)
        querystring = {"fields": "firstName,lastName"}
        headers = {
            "accept": "application/json",
            "authorization": "Basic %s" % (self.AUTHORIZATION_TOKEN)
        }
        response = requests.request(
            "GET", url, headers=headers, params=querystring)
        response_parse = json.loads(response.text)
        if response.status_code == 200:
            return response_parse
        else:
            print(response)
            return {}

    # Get time of balance
    def time_off_balance(self, employee_id):
        url = "https://api.bamboohr.com/api/gateway.php/%s/v1/employees/%s/time_off/calculator" % (
            self.companyDomain, employee_id)
        headers = {
            "accept": "application/json",
            "authorization": "Basic %s" % (self.AUTHORIZATION_TOKEN)
        }
        response = requests.request(
            "GET", url, headers=headers)

        # parse JSON response.text, return type 'list'
        response_parse_tolist = json.loads(response.text)
        # print(response_parse_tolist)

        # convert a list of dictionaries into a dict
        response_todict = {}
        for item in response_parse_tolist:
            # print(item)
            # print("----------")
            # remove and return the name field to use as a key
            name = item.pop("name")
            # add new key:value to response_todict Dict
            response_todict[name] = item
        # print(response_todict)

        # Expected: collect "time off type": {'balance': '..', 'usedYearToDate': '..', 'end': '...'}
        answer = {}
        # collect all keys from response_todict ("Vacation", "Sick", "COVID-19 Related Absence", "Bereavement", "Comp/In Lieu Time", "FMLA")
        keys = response_todict.keys()
        info_needed = ("balance", "usedYearToDate", "end")
        # Go to (e.g) "Vacation":{'timeOffType': '78', 'units': 'hours', 'balance': '0.0', 'end': '2020-09-24', 'policyType': 'discretionary', 'usedYearToDate': '32.0'}
        for key in keys:
            sub_answer = {}
            # Check if the element is info_needed
            # For each element in value of key "Vaction"
            for el in response_todict[key]:
                # Create a sub-dict inside answer Dict  {'Vacation': {}, 'Sick': {}, ...}
                if el in info_needed:
                    # add el key:value to sub_answer dict
                    # 'Vacation': {'balance': '0.0', 'end': '2020-09-24'...}
                    sub_answer[el] = response_todict[key][el]
            # add sub_answer Dict to answer Dict
            # {'Vacation': {'balance': '0.0', 'end': '2020-09-24', 'usedYearToDate': '0.0'}, 'Sick': {'balance': '0.0', 'end': '2020-09-24', 'usedYearToDate': '0.0'}, ...}
            answer[key] = sub_answer

        # return result to answer user
        if response.status_code == 200:
            # print(answer)
            # sample answer
            # {'Vacation': {'balance': '81.0', 'end': '2020-09-26', 'usedYearToDate': '144.0'},
            # 'Sick': {'balance': '0.0', 'end': '2020-09-26', 'usedYearToDate': '0.0'},
            # 'COVID-19 Related Absence': {'balance': '0.0', 'end': '2020-09-26', 'usedYearToDate': '0.0'}, '
            # FMLA': {'balance': '0.0', 'end': '2020-09-26', 'usedYearToDate': '0.0'},
            # 'Bereavement': {'balance': '0.0', 'end': '2020-09-26', 'usedYearToDate': '0.0'},
            # 'Comp/In Lieu Time': {'balance': '0.0', 'end': '2020-09-26', 'usedYearToDate': '0.0'}}
            return answer
        else:
            return answer

    # Get time off policies
    def time_off_policy(self):
        url = "https://api.bamboohr.com/api/gateway.php/%s/v1/meta/time_off/policies/" % (
            self.companyDomain)
        headers = {
            "accept": "application/json",
            "authorization": "Basic %s" % (self.AUTHORIZATION_TOKEN)}
        response = requests.request("GET", url, headers=headers)
        # parse JSON response.text, return a list of dictionaries
        response_parse_tolist = json.loads(response.text)

        # convert a list of dictionaries into a dict
        response_todict = {}
        for item in response_parse_tolist:
            # remove and return the name field to use as a key
            name = item.pop("name")
            # add new key:value to response_todict Dict
            response_todict[name] = item

        # Expected: collect "policy'": {'id': '..', 'effectiveDate': '..'}
        answer = {}
        # collect all keys from response_todict ("BambooHR Manual Policy", "Vacation Full-Time", ..)
        keys = response_todict.keys()
        info_needed = ("id", "effectiveDate")

        # Go to (e.g) 'BambooHR Manual Policy': {'id': '82', 'timeOffTypeId': '82', 'effectiveDate': None, 'type': 'manual'}
        for key in keys:
            # Create a sub-dict inside answer Dict  {"BambooHR Manual Policy": {}, "Vacation Full-Time": {}, ...}
            sub_answer = {}
            # For each element in value of key "BambooHR Manual Policy"
            for el in response_todict[key]:
                # Check if the element is info_needed
                if el in info_needed:
                    # add el key:value to sub_answer dict
                    # 'BambooHR Manual Policy': {'id': '..', 'effectiveDate': '..'}
                    sub_answer[el] = response_todict[key][el]
            # add sub_answer Dict to answer Dict
            # {'BambooHR Manual Policy': {'id': '..', 'effectiveDate': '..'}, 'Vacation Full-Time': {'id': '..', 'effectiveDate': '..'}, ...}
            answer[key] = sub_answer

        if response.status_code == 200:
            # print(answer)
            # answer sample
            # {'BambooHR Manual Policy': {'id': '81', 'effectiveDate': None},
            # 'BambooHR Unlimited Policy': {'id': '81', 'effectiveDate': None},
            # 'Sick Full-Time': {'id': '81', 'effectiveDate': None},
            # 'Vacation Full-Time': {'id': '81', 'effectiveDate': None}}
            return answer
        else:
            return {}

    # Request time off

    def time_off_request(self, employee_id):
        url = "https://api.bamboohr.com/api/gateway.php/%s/v1/employees/%s/time_off/request" % (
            self.companyDomain, employee_id)
        headers = {
            "content-type": "application/json",
            "authorization": "Basic %s" % (self.AUTHORIZATION_TOKEN)
        }
        response = requests.request("PUT", url, headers=headers)
        print(response.text)


# Instantiate class Bamboohr
bamboohr = Bamboohr()

# def get_employee():
#     companyDomain = 'monsterinc'
#     employee_id = '108'
#     AUTHORIZATION_TOKEN = os.environ['AUTHORIZATION_TOKEN']
#     url1 = "https://api.bamboohr.com/api/gateway.php/%s/v1/employees/%s/" % (
#         companyDomain, employee_id)
#     querystring1 = {"fields": "firstName,lastName"}
#     headers1 = {
#         "accept": "application/json",
#         "authorization": "Basic %s" % (AUTHORIZATION_TOKEN)
#     }
#     response = requests.request(
#         "GET", url1, headers=headers1, params=querystring1)
#     print("response.text: " + response.text)
#     print("")

#     response_parse = json.loads(response.text)
#     print("response_parse: ")
#     print(response_parse)
#     print("")
#     keys = response_parse.keys()
#     for key in keys:
#         print(key)
#     print("")
#     print(response_parse["id"])


if __name__ == "__main__":
    # bamboohr.get_employee_directory()
    # bamboohr.get_employee()
    bamboohr.time_off_balance(108)
    # bamboohr.time_off_policy()
